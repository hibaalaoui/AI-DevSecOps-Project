name: SCA Security Scan with Snyk

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  sca-scan:
    name: Software Composition Analysis (SCA) with Snyk
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Prepare reports directory
      run: mkdir -p reports
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm install -g snyk
    
    - name: Run Snyk Auth
      run: |
        echo "Authenticating with Snyk..."
        # Note: SNYK_TOKEN should be set in repository secrets
        if [ -z "$SNYK_TOKEN" ]; then
          echo "SNYK_TOKEN not set, using public scan"
        fi
    
    - name: Run Snyk Python Scan
      run: |
        echo "Running Snyk Python dependency scan..."
        if [ -n "$SNYK_TOKEN" ]; then
          snyk test --file=requirements.txt --json-file-output=reports/snyk-python-report.json || true
          snyk test --file=requirements.txt --severity-threshold=high --output=reports/snyk-python-report.txt || true
        else
          echo "Skipping authenticated Snyk scan - token not available"
        fi
    
    - name: Run Snyk Code Scan
      run: |
        echo "Running Snyk Code analysis..."
        if [ -n "$SNYK_TOKEN" ]; then
          snyk code test --json-file-output=reports/snyk-code-report.json || true
          snyk code test --severity-threshold=high --output=reports/snyk-code-report.txt || true
        else
          echo "Skipping authenticated Snyk Code scan - token not available"
        fi
    
    - name: Run OWASP Dependency-Check
      run: |
        echo "Running OWASP Dependency-Check..."
        # Download and run dependency-check
        wget https://github.com/jeremylong/DependencyCheck/releases/latest/download/dependency-check-8.4.0-release.zip
        unzip dependency-check-8.4.0-release.zip
        ./dependency-check/bin/dependency-check.sh --scan . --format JSON --out reports/dependency-check-report.json || true
        ./dependency-check/bin/dependency-check.sh --scan . --format HTML --out reports/dependency-check-report.html || true
    
    - name: Run pip-audit
      run: |
        echo "Running pip-audit..."
        pip install pip-audit
        pip-audit --format=json --output=reports/pip-audit-report.json || true
        pip-audit --output=reports/pip-audit-report.txt || true
    
    - name: Run Safety Check
      run: |
        echo "Running Safety check..."
        pip install safety
        safety check --json --output reports/safety-detailed-report.json || true
        safety check --output reports/safety-detailed-report.txt || true
    
    - name: Trivy FS scan (vuln/secret/license)
      uses: aquasecurity/trivy-action@0.24.0
      with:
        scan-type: fs
        ignore-unfixed: true
        scanners: vuln,secret,license
        severity: CRITICAL,HIGH,MEDIUM,LOW
        format: sarif
        output: reports/trivy.sarif
        github-pat: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Generate SCA Summary Report
      run: |
        echo "Generating SCA summary report..."
        python scripts/generate_sca_summary.py
    
    - name: Upload SCA reports
      uses: actions/upload-artifact@v3
      with:
        name: sca-reports
        path: |
          reports/snyk-*-report.*
          reports/dependency-check-report.*
          reports/pip-audit-report.*
          reports/safety-detailed-report.*
          reports/trivy.sarif
          reports/sca-summary.json
          reports/sca-summary.txt

    - name: Upload Trivy SARIF to Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/trivy.sarif
    
    - name: Display SCA Results
      run: |
        echo "## SCA Scan Results"
        echo "### Snyk Python Vulnerabilities:"
        if [ -f reports/snyk-python-report.txt ]; then
          cat reports/snyk-python-report.txt
        else
          echo "No Snyk Python issues found or scan skipped"
        fi
        
        echo "### Snyk Code Issues:"
        if [ -f reports/snyk-code-report.txt ]; then
          cat reports/snyk-code-report.txt
        else
          echo "No Snyk Code issues found or scan skipped"
        fi
        
        echo "### Dependency-Check Results:"
        if [ -f reports/dependency-check-report.html ]; then
          echo "Dependency-Check HTML report generated"
        else
          echo "Dependency-Check scan completed"
        fi
        
        echo "### pip-audit Results:"
        if [ -f reports/pip-audit-report.txt ]; then
          cat reports/pip-audit-report.txt
        else
          echo "No pip-audit issues found"
        fi
        
        echo "### Safety Check Results:"
        if [ -f reports/safety-detailed-report.txt ]; then
          cat reports/safety-detailed-report.txt
        else
          echo "No Safety issues found"
        fi
