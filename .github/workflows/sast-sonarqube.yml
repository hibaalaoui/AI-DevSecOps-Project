name: SAST Analysis with SonarQube

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones d√©sactiv√© pour meilleure analyse

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=my-flask-app
            -Dsonar.python.version=3.11

      - name: Wait for Quality Gate
        run: |
          sleep 10
          curl -u ${{ secrets.SONAR_TOKEN }}: \
            "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=my-flask-app" \
            -o quality-gate.json

      - name: Download SonarQube Report
        run: |
          # Cr√©er le dossier pour les rapports
          mkdir -p sonarqube-reports
          
          # T√©l√©charger les issues
          curl -u ${{ secrets.SONAR_TOKEN }}: \
            "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=my-flask-app&ps=500" \
            -o sonarqube-reports/issues.json
          
          # T√©l√©charger les m√©triques
          curl -u ${{ secrets.SONAR_TOKEN }}: \
            "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=my-flask-app&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,security_hotspots" \
            -o sonarqube-reports/metrics.json
          
          # Copier le quality gate
          cp quality-gate.json sonarqube-reports/

      - name: Generate HTML Report
        run: |
          cat > sonarqube-reports/report.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>SonarQube SAST Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                  .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  h1 { color: #333; border-bottom: 3px solid #4CAF50; padding-bottom: 10px; }
                  h2 { color: #555; margin-top: 30px; }
                  .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
                  .metric-card { background: #f9f9f9; padding: 20px; border-radius: 5px; border-left: 4px solid #4CAF50; }
                  .metric-card.warning { border-left-color: #ff9800; }
                  .metric-card.error { border-left-color: #f44336; }
                  .metric-value { font-size: 2em; font-weight: bold; color: #333; }
                  .metric-label { color: #666; font-size: 0.9em; margin-top: 5px; }
                  table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                  th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
                  th { background-color: #4CAF50; color: white; }
                  tr:hover { background-color: #f5f5f5; }
                  .severity-critical { color: #f44336; font-weight: bold; }
                  .severity-major { color: #ff9800; font-weight: bold; }
                  .severity-minor { color: #2196F3; }
                  .timestamp { color: #999; font-size: 0.9em; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üîç SonarQube SAST Analysis Report</h1>
                  <p class="timestamp">Generated: $(date)</p>
                  <p class="timestamp">Project: my-flask-app</p>
          
                  <h2>üìä Quality Metrics</h2>
                  <div class="metrics" id="metrics"></div>
          
                  <h2>üêõ Issues Summary</h2>
                  <div id="issues-summary"></div>
          
                  <h2>üìã Detailed Issues</h2>
                  <table id="issues-table">
                      <thead>
                          <tr>
                              <th>Severity</th>
                              <th>Type</th>
                              <th>Message</th>
                              <th>File</th>
                              <th>Line</th>
                          </tr>
                      </thead>
                      <tbody id="issues-body"></tbody>
                  </table>
              </div>
          
              <script>
                  // Charger et afficher les m√©triques
                  fetch('metrics.json')
                      .then(r => r.json())
                      .then(data => {
                          const metricsDiv = document.getElementById('metrics');
                          const measures = data.component.measures;
                          measures.forEach(m => {
                              const card = document.createElement('div');
                              const value = parseFloat(m.value);
                              let cardClass = 'metric-card';
                              if (m.metric === 'bugs' && value > 0) cardClass += ' error';
                              if (m.metric === 'vulnerabilities' && value > 0) cardClass += ' error';
                              if (m.metric === 'code_smells' && value > 10) cardClass += ' warning';
          
                              card.className = cardClass;
                              card.innerHTML = `
                                  <div class="metric-value">${m.value}</div>
                                  <div class="metric-label">${m.metric.replace(/_/g, ' ').toUpperCase()}</div>
                              `;
                              metricsDiv.appendChild(card);
                          });
                      });
          
                  // Charger et afficher les issues
                  fetch('issues.json')
                      .then(r => r.json())
                      .then(data => {
                          const tbody = document.getElementById('issues-body');
                          const summary = document.getElementById('issues-summary');
          
                          const issues = data.issues || [];
                          summary.innerHTML = `<p>Total issues found: <strong>${issues.length}</strong></p>`;
          
                          issues.forEach(issue => {
                              const row = tbody.insertRow();
                              const severityClass = 'severity-' + issue.severity.toLowerCase();
                              row.innerHTML = `
                                  <td class="${severityClass}">${issue.severity}</td>
                                  <td>${issue.type}</td>
                                  <td>${issue.message}</td>
                                  <td>${issue.component.split(':')[1] || issue.component}</td>
                                  <td>${issue.line || 'N/A'}</td>
                              `;
                          });
          
                          if (issues.length === 0) {
                              tbody.innerHTML = '<tr><td colspan="5" style="text-align:center;">‚úÖ No issues found!</td></tr>';
                          }
                      });
              </script>
          </body>
          </html>
          EOF

      - name: Upload SonarQube Reports
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-sast-report
          path: sonarqube-reports/
          retention-days: 30

      - name: Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const metrics = JSON.parse(fs.readFileSync('sonarqube-reports/metrics.json', 'utf8'));
            const issues = JSON.parse(fs.readFileSync('sonarqube-reports/issues.json', 'utf8'));
            
            const measures = metrics.component.measures;
            const metricsText = measures.map(m => `- **${m.metric}**: ${m.value}`).join('\n');
            
            const comment = `## üîç SonarQube SAST Analysis Results
            
            ### üìä Metrics
            ${metricsText}
            
            ### üêõ Issues
            - **Total Issues**: ${issues.total || issues.issues.length}
            
            [üì• Download detailed report from artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Check Quality Gate
        run: |
          STATUS=$(jq -r '.projectStatus.status' quality-gate.json)
          if [ "$STATUS" != "OK" ]; then
            echo "‚ùå Quality Gate failed: $STATUS"
            exit 1
          fi
          echo "‚úÖ Quality Gate passed!"