name: SAST Analysis with SonarQube (Docker)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:community
        ports:
          - 9000:9000
        options: >-
          --health-cmd "wget -qO- http://localhost:9000/api/system/status | grep -q '\"status\":\"UP\"'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for SonarQube
        run: |
          echo "Waiting for SonarQube to be ready..."
          timeout 300 bash -c 'until curl -s http://localhost:9000/api/system/status | grep -q "UP"; do sleep 5; done'
          echo "SonarQube is ready!"

      - name: Setup SonarQube
        run: |
          # Changer le mot de passe admin
          curl -u admin:admin -X POST "http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=admin123"
          
          # Créer le projet
          curl -u admin:admin123 -X POST "http://localhost:9000/api/projects/create?name=my-flask-app&project=my-flask-app"
          
          # Générer un token
          TOKEN=$(curl -u admin:admin123 -X POST "http://localhost:9000/api/user_tokens/generate?name=github-actions" | jq -r .token)
          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Install SonarScanner
        run: |
          wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q sonar-scanner-cli-5.0.1.3006-linux.zip
          echo "$PWD/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarQube Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=my-flask-app \
            -Dsonar.projectName="My Flask App" \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${{ env.SONAR_TOKEN }} \
            -Dsonar.python.version=3.11 \
            -Dsonar.exclusions="**/node_modules/**,**/__pycache__/**,.github/**"

      - name: Download Reports
        run: |
          mkdir -p sonarqube-reports
          
          # Attendre que l'analyse soit terminée
          sleep 15
          
          # Télécharger les issues
          curl -u admin:admin123 \
            "http://localhost:9000/api/issues/search?componentKeys=my-flask-app&ps=500" \
            -o sonarqube-reports/issues.json
          
          # Télécharger les métriques
          curl -u admin:admin123 \
            "http://localhost:9000/api/measures/component?component=my-flask-app&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,security_hotspots,ncloc,complexity" \
            -o sonarqube-reports/metrics.json
          
          # Quality Gate
          curl -u admin:admin123 \
            "http://localhost:9000/api/qualitygates/project_status?projectKey=my-flask-app" \
            -o sonarqube-reports/quality-gate.json

      - name: Generate HTML Report
        run: |
          cat > sonarqube-reports/index.html << 'HTMLEOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>SonarQube SAST Report</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { 
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      padding: 20px;
                      color: #333;
                  }
                  .container { 
                      max-width: 1400px; 
                      margin: 0 auto; 
                      background: white; 
                      border-radius: 15px; 
                      box-shadow: 0 10px 40px rgba(0,0,0,0.2);
                      overflow: hidden;
                  }
                  .header {
                      background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                      color: white;
                      padding: 40px;
                      text-align: center;
                  }
                  .header h1 { font-size: 2.5em; margin-bottom: 10px; }
                  .header .subtitle { opacity: 0.9; font-size: 1.1em; }
                  .content { padding: 40px; }
                  .metrics-grid { 
                      display: grid; 
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
                      gap: 25px; 
                      margin: 30px 0;
                  }
                  .metric-card { 
                      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                      padding: 30px; 
                      border-radius: 10px; 
                      text-align: center;
                      transition: transform 0.3s, box-shadow 0.3s;
                      border-left: 5px solid #4CAF50;
                  }
                  .metric-card:hover { 
                      transform: translateY(-5px);
                      box-shadow: 0 5px 20px rgba(0,0,0,0.1);
                  }
                  .metric-card.warning { border-left-color: #ff9800; }
                  .metric-card.error { border-left-color: #f44336; }
                  .metric-value { 
                      font-size: 3em; 
                      font-weight: bold; 
                      color: #333;
                      margin-bottom: 10px;
                  }
                  .metric-label { 
                      color: #666; 
                      font-size: 1em; 
                      text-transform: uppercase;
                      letter-spacing: 1px;
                  }
                  .section { margin: 40px 0; }
                  .section-title { 
                      font-size: 1.8em; 
                      color: #333; 
                      margin-bottom: 20px;
                      padding-bottom: 10px;
                      border-bottom: 3px solid #4CAF50;
                  }
                  table { 
                      width: 100%; 
                      border-collapse: collapse; 
                      background: white;
                      border-radius: 10px;
                      overflow: hidden;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
                  }
                  th { 
                      background: #4CAF50; 
                      color: white; 
                      padding: 15px; 
                      text-align: left;
                      font-weight: 600;
                  }
                  td { 
                      padding: 15px; 
                      border-bottom: 1px solid #eee; 
                  }
                  tr:hover { background-color: #f9f9f9; }
                  .severity-blocker, .severity-critical { 
                      color: #d32f2f; 
                      font-weight: bold;
                      background: #ffebee;
                      padding: 5px 10px;
                      border-radius: 5px;
                  }
                  .severity-major { 
                      color: #f57c00; 
                      font-weight: bold;
                      background: #fff3e0;
                      padding: 5px 10px;
                      border-radius: 5px;
                  }
                  .severity-minor { 
                      color: #1976d2;
                      background: #e3f2fd;
                      padding: 5px 10px;
                      border-radius: 5px;
                  }
                  .severity-info { 
                      color: #388e3c;
                      background: #e8f5e9;
                      padding: 5px 10px;
                      border-radius: 5px;
                  }
                  .badge { 
                      display: inline-block;
                      padding: 5px 12px;
                      border-radius: 20px;
                      font-size: 0.85em;
                      font-weight: 600;
                  }
                  .badge-bug { background: #ffebee; color: #d32f2f; }
                  .badge-vulnerability { background: #fce4ec; color: #c2185b; }
                  .badge-code-smell { background: #fff3e0; color: #f57c00; }
                  .badge-security-hotspot { background: #ede7f6; color: #5e35b1; }
                  .timestamp { 
                      text-align: center; 
                      color: #999; 
                      margin-top: 40px; 
                      padding: 20px;
                      background: #f5f5f5;
                      border-radius: 10px;
                  }
                  .no-issues {
                      text-align: center;
                      padding: 60px;
                      font-size: 1.5em;
                      color: #4CAF50;
                  }
                  .quality-gate {
                      padding: 30px;
                      border-radius: 10px;
                      text-align: center;
                      font-size: 1.3em;
                      font-weight: bold;
                      margin: 30px 0;
                  }
                  .quality-gate.passed {
                      background: #e8f5e9;
                      color: #2e7d32;
                      border: 3px solid #4caf50;
                  }
                  .quality-gate.failed {
                      background: #ffebee;
                      color: #c62828;
                      border: 3px solid #f44336;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🔍 SonarQube SAST Analysis Report</h1>
                      <div class="subtitle">Static Application Security Testing Results</div>
                  </div>
          
                  <div class="content">
                      <div id="quality-gate-section"></div>
          
                      <div class="section">
                          <h2 class="section-title">📊 Quality Metrics</h2>
                          <div class="metrics-grid" id="metrics"></div>
                      </div>
          
                      <div class="section">
                          <h2 class="section-title">🐛 Issues Summary</h2>
                          <div id="issues-summary"></div>
                      </div>
          
                      <div class="section">
                          <h2 class="section-title">📋 Detailed Issues</h2>
                          <table>
                              <thead>
                                  <tr>
                                      <th>Severity</th>
                                      <th>Type</th>
                                      <th>Message</th>
                                      <th>File</th>
                                      <th>Line</th>
                                  </tr>
                              </thead>
                              <tbody id="issues-body"></tbody>
                          </table>
                      </div>
          
                      <div class="timestamp" id="timestamp"></div>
                  </div>
              </div>
          
              <script>
                  document.getElementById('timestamp').innerHTML = 
                      'Generated on: ' + new Date().toLocaleString();
          
                  // Quality Gate
                  fetch('quality-gate.json')
                      .then(r => r.json())
                      .then(data => {
                          const qgDiv = document.getElementById('quality-gate-section');
                          const status = data.projectStatus.status;
                          const qgClass = status === 'OK' ? 'passed' : 'failed';
                          const qgIcon = status === 'OK' ? '✅' : '❌';
                          qgDiv.innerHTML = `
                              <div class="quality-gate ${qgClass}">
                                  ${qgIcon} Quality Gate: ${status}
                              </div>
                          `;
                      })
                      .catch(() => {
                          document.getElementById('quality-gate-section').innerHTML = '';
                      });
          
                  // Metrics
                  fetch('metrics.json')
                      .then(r => r.json())
                      .then(data => {
                          const metricsDiv = document.getElementById('metrics');
                          const measures = data.component.measures;
          
                          const metricNames = {
                              'bugs': 'Bugs',
                              'vulnerabilities': 'Vulnerabilities',
                              'code_smells': 'Code Smells',
                              'security_hotspots': 'Security Hotspots',
                              'coverage': 'Coverage (%)',
                              'duplicated_lines_density': 'Duplications (%)',
                              'ncloc': 'Lines of Code',
                              'complexity': 'Complexity'
                          };
          
                          measures.forEach(m => {
                              const value = parseFloat(m.value);
                              let cardClass = 'metric-card';
                              if ((m.metric === 'bugs' || m.metric === 'vulnerabilities') && value > 0) 
                                  cardClass += ' error';
                              if (m.metric === 'code_smells' && value > 10) 
                                  cardClass += ' warning';
                              if (m.metric === 'security_hotspots' && value > 0) 
                                  cardClass += ' warning';
          
                              const card = document.createElement('div');
                              card.className = cardClass;
                              card.innerHTML = `
                                  <div class="metric-value">${m.value}</div>
                                  <div class="metric-label">${metricNames[m.metric] || m.metric}</div>
                              `;
                              metricsDiv.appendChild(card);
                          });
                      });
          
                  // Issues
                  fetch('issues.json')
                      .then(r => r.json())
                      .then(data => {
                          const tbody = document.getElementById('issues-body');
                          const summary = document.getElementById('issues-summary');
                          const issues = data.issues || [];
          
                          // Summary
                          const typeCounts = {};
                          issues.forEach(i => {
                              typeCounts[i.type] = (typeCounts[i.type] || 0) + 1;
                          });
          
                          let summaryHTML = `<p style="font-size: 1.2em; margin-bottom: 20px;">
                              <strong>Total Issues: ${issues.length}</strong></p>`;
          
                          for (const [type, count] of Object.entries(typeCounts)) {
                              const badgeClass = 'badge-' + type.toLowerCase().replace('_', '-');
                              summaryHTML += `<span class="badge ${badgeClass}">${type}: ${count}</span> `;
                          }
                          summary.innerHTML = summaryHTML;
          
                          // Table
                          if (issues.length === 0) {
                              tbody.innerHTML = '<tr><td colspan="5" class="no-issues">✅ No issues found! Great job!</td></tr>';
                          } else {
                              issues.forEach(issue => {
                                  const row = tbody.insertRow();
                                  const severityClass = 'severity-' + issue.severity.toLowerCase();
                                  const fileName = issue.component.split(':')[1] || issue.component;
          
                                  row.innerHTML = `
                                      <td><span class="${severityClass}">${issue.severity}</span></td>
                                      <td><span class="badge badge-${issue.type.toLowerCase().replace('_', '-')}">${issue.type}</span></td>
                                      <td>${issue.message}</td>
                                      <td><code>${fileName}</code></td>
                                      <td>${issue.line || 'N/A'}</td>
                                  `;
                              });
                          }
                      });
              </script>
          </body>
          </html>
          HTMLEOF

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-sast-report
          path: sonarqube-reports/
          retention-days: 30

      - name: Generate Summary
        run: |
          echo "# 🔍 SonarQube SAST Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Quality Gate
          QG_STATUS=$(jq -r '.projectStatus.status' sonarqube-reports/quality-gate.json)
          if [ "$QG_STATUS" = "OK" ]; then
            echo "## ✅ Quality Gate: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Quality Gate: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Metrics
          echo "## 📊 Metrics" >> $GITHUB_STEP_SUMMARY
          jq -r '.component.measures[] | "- **\(.metric)**: \(.value)"' sonarqube-reports/metrics.json >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Issues count
          ISSUES_COUNT=$(jq '.total // (.issues | length)' sonarqube-reports/issues.json)
          echo "## 🐛 Issues Found: $ISSUES_COUNT" >> $GITHUB_STEP_SUMMARY