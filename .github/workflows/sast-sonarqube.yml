name: SAST Analysis with SonarQube (Docker)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:community
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl -s http://localhost:9000/api/system/status | grep -q '\"status\":\"UP\"'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Wait for SonarQube to be ready
        run: |
          echo "⏳ Waiting for SonarQube..."
          for i in {1..90}; do
            STATUS=$(curl -s http://localhost:9000/api/system/status | jq -r '.status' 2>/dev/null || echo "DOWN")
            echo "Status: $STATUS"
            if [ "$STATUS" = "UP" ]; then
              echo "✅ SonarQube is UP!"
              break
            fi
            sleep 5
          done

      - name: Setup SonarQube project and token
        run: |
          echo "🔧 Configuring SonarQube..."
          NEW_PASS="AdminPassword123!"

          curl -s -u admin:admin -X POST "http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=$NEW_PASS"

          curl -s -u admin:$NEW_PASS -X POST "http://localhost:9000/api/projects/create?name=my-flask-app&project=my-flask-app" || true

          # Wait until project appears
          for i in {1..30}; do
            if curl -sf -u admin:$NEW_PASS "http://localhost:9000/api/projects/search?projects=my-flask-app" | grep -q my-flask-app; then
              echo "✅ Project confirmed."
              break
            fi
            echo "Waiting project creation... ($i)"
            sleep 5
          done

          TOKEN=$(curl -s -u admin:$NEW_PASS -X POST "http://localhost:9000/api/user_tokens/generate?name=github-actions" | jq -r .token)
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "❌ Failed to generate token"
            exit 1
          fi

          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "NEW_PASS=$NEW_PASS" >> $GITHUB_ENV
          echo "✅ Token generated successfully"

      - name: Install SonarScanner
        run: |
          wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q sonar-scanner-cli-5.0.1.3006-linux.zip
          echo "$PWD/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarQube Analysis
        run: |
          echo "🚀 Starting SonarQube analysis..."
          sonar-scanner \
            -Dsonar.projectKey=my-flask-app \
            -Dsonar.projectName="My Flask App" \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.python.version=3.11 \
            -Dsonar.exclusions="**/node_modules/**,**/__pycache__/**,.github/**"

          EXIT_CODE=$?
          echo "SonarScanner exit code: $EXIT_CODE"
          if [ $EXIT_CODE -ne 0 ]; then
            echo "❌ SonarQube analysis failed"
            exit 1
          fi

      - name: Wait for analysis to complete
        run: |
          echo "⏳ Waiting for analysis completion..."
          for i in {1..60}; do
            STATUS=$(curl -s -u admin:$NEW_PASS "http://localhost:9000/api/ce/activity?component=my-flask-app" | jq -r '.tasks[0].status // "NONE"')
            echo "Status: $STATUS"
            if [ "$STATUS" = "SUCCESS" ]; then
              echo "✅ Analysis complete."
              break
            fi
            sleep 10
          done

      - name: Download SonarQube reports
        run: |
          mkdir -p sonarqube-reports
          echo "📥 Fetching SonarQube reports..."
          
          curl -sf -u $SONAR_TOKEN: "http://localhost:9000/api/issues/search?componentKeys=my-flask-app&ps=500" -o sonarqube-reports/issues.json
          curl -sf -u $SONAR_TOKEN: "http://localhost:9000/api/measures/component?component=my-flask-app&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,security_hotspots,ncloc,complexity" -o sonarqube-reports/metrics.json
          curl -sf -u $SONAR_TOKEN: "http://localhost:9000/api/qualitygates/project_status?projectKey=my-flask-app" -o sonarqube-reports/quality-gate.json
          
          # Validate JSON
          jq . sonarqube-reports/issues.json >/dev/null || { echo "❌ Invalid issues.json"; exit 1; }
          jq . sonarqube-reports/metrics.json >/dev/null || { echo "❌ Invalid metrics.json"; exit 1; }
          jq . sonarqube-reports/quality-gate.json >/dev/null || { echo "❌ Invalid quality-gate.json"; exit 1; }

      - name: Generate HTML Report
        run: |
          echo "🧾 Generating HTML report..."
          # (reuse your HTML code unchanged)
          cat > sonarqube-reports/index.html <<'HTMLEOF'
          <!-- Ton code HTML original inchangé -->
          HTMLEOF

      - name: Upload Reports as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-sast-report
          path: sonarqube-reports/
          retention-days: 30

      - name: Generate Job Summary
        run: |
          echo "# 🔍 SonarQube SAST Summary" >> $GITHUB_STEP_SUMMARY
          QG_STATUS=$(jq -r '.projectStatus.status' sonarqube-reports/quality-gate.json)
          echo "## Quality Gate: $QG_STATUS" >> $GITHUB_STEP_SUMMARY
          jq -r '.component.measures[] | "- **\(.metric)**: \(.value)"' sonarqube-reports/metrics.json >> $GITHUB_STEP_SUMMARY
          ISSUES_COUNT=$(jq '.total // (.issues | length)' sonarqube-reports/issues.json)
          echo "## Issues Found: $ISSUES_COUNT" >> $GITHUB_STEP_SUMMARY
