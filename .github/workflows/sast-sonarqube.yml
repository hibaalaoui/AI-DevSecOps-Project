name: SAST Analysis with SonarQube (Docker)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:community
        ports:
          - 9000:9000
        options: >-
          --health-cmd "wget -qO- http://localhost:9000/api/system/status | grep -q '\"status\":\"UP\"'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for SonarQube to be ready
        run: |
          echo "Waiting for SonarQube to be fully initialized..."
          for i in {1..60}; do
            STATUS=$(curl -s http://localhost:9000/api/system/status | jq -r '.status')
            if [ "$STATUS" = "UP" ]; then
              echo "SonarQube is UP and ready!"
              break
            fi
            echo "Still starting... ($i)"
            sleep 5
          done

      - name: Setup SonarQube
        run: |
          echo "Configuring SonarQube admin user and project..."
          NEW_PASS="AdminPassword123!"

          # Changer le mot de passe admin
          curl -s -u admin:admin -X POST "http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=$NEW_PASS"

          # Créer le projet
          curl -s -u admin:$NEW_PASS -X POST "http://localhost:9000/api/projects/create?name=my-flask-app&project=my-flask-app"

          # Attendre que le projet soit bien créé
          sleep 5

          # Générer un token
          TOKEN=$(curl -s -u admin:$NEW_PASS -X POST "http://localhost:9000/api/user_tokens/generate?name=github-actions" | jq -r .token)
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "❌ Échec de la génération du token SonarQube"
            exit 1
          fi
          echo "✅ Token généré avec succès"
          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV
      
      

      - name: Install SonarScanner
        run: |
          wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q sonar-scanner-cli-5.0.1.3006-linux.zip
          echo "$PWD/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: 🔍 Run SonarQube Analysis (non-blocking)
        run: |
          echo "Running SonarQube SAST analysis..."
          set +e  # ← empêche le job de s'arrêter si SonarQube retourne une erreur
          sonar-scanner \
            -Dsonar.projectKey=my-flask-app \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.token=${{ env.SONAR_TOKEN }} \
            -Dsonar.qualitygate.wait=false \
            -Dsonar.report.export.path=sonar-report.json
          set -e

      - name: 📦 Generate SonarQube HTML Report
        run: |
          echo "Generating HTML report..."
          # Télécharge les issues depuis l’API SonarQube
          curl -s -u admin:AdminPassword123! \
            "${{ env.SONAR_HOST_URL }}/api/issues/search?componentKeys=my-flask-app&p=1&ps=500" \
            -o sonar-report.json

          # Crée un rapport HTML simple et complet
          echo "<html><head><title>SonarQube Report</title></head><body>" > sonar-report.html
          echo "<h1>SonarQube SAST Results</h1>" >> sonar-report.html
          echo "<pre>" >> sonar-report.html
          cat sonar-report.json >> sonar-report.html
          echo "</pre></body></html>" >> sonar-report.html
          echo "✅ Reports generated: sonar-report.json & sonar-report.html"

      - name: 📤 Upload Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sonar-reports
          path: |
            sonar-report.json
            sonar-report.html
